stat_pvalue_manual(analysis_host_genome_meta_combined_zygosity_counts_sim_mode_pw_test) +
scale_y_continuous(expand = expansion(mult = c(0.05, 0.15))) +
theme(axis.text.x = element_text(angle = -45, hjust = 0, vjust = 0.5)) +
facet_grid(
# scenario 2 first n last n
# pathogens.introgression_individuals_per_generation + hosts.species_n ~ pathogens.species_n,
# other scenarios first n last n:
pathogens.introgression_individuals_per_generation + hosts.mutation_rate_per_peptide ~ pathogens.species_n + pathogens.mutation_rate_per_peptide,
#labeller = labeller(id_same_config_different_mode = label_from_id ),
scales = "free_x",
labeller = label_both
)
analysis_host_genome_meta_combined_zygosity_counts_plt_box
save_plot_defaults(file.path(output_path, "analysis_host_genome_meta_combined_zygosity_counts_plt_box.png"),analysis_host_genome_meta_combined_zygosity_counts_plt_box, 3000, 5000 )
source("./help.R")
data_dir <- "./data"
output_dir <- "./output"
analysis_id <- "scenario_2"
output_path <- file.path(output_dir, analysis_id)
dir.create(output_path, showWarnings = FALSE)
run_ids = build_run_ids_same_date("2022-07-17",1,32)
analysis_configs_with_config_ids = read_analysis_configs(run_ids)
config_ids_sample = analysis_configs_with_config_ids %>% pull(config_id)
analysis_configs = analysis_configs_with_config_ids %>% select(!config_id)
# needs to be executed in one go, else hash might change???
analysis_configs$hash_no_sim_mode = analysis_configs %>% select((!run_id & !simulation_mode)) %>% apply(1, digest)
analysis_configs_merged_by_no_sim_hash = analysis_configs %>%
group_by(hash_no_sim_mode) %>%
summarise_all(merge_by_paste_if_unequal)
analysis_configs_hash_run_ids_map = analysis_configs_merged_by_no_sim_hash %>%
mutate(run_id_same_config_different_mode = run_id) %>%
select(hash_no_sim_mode, run_id_same_config_different_mode)
analysis_configs_merged = analysis_configs %>%
left_join(analysis_configs_hash_run_ids_map, by = "hash_no_sim_mode")
analysis_configs_merged_unique = analysis_configs_merged %>%
select((!run_id & !simulation_mode)) %>%
distinct(hash_no_sim_mode, .keep_all = TRUE) %>%
mutate(id_same_config_different_mode = 1:n())
analysis_configs_merged_changed_mask = analysis_configs_merged %>% sapply(function(x) !length(unique(x)) == 1)
analysis_configs_merged_changed = analysis_configs_merged[, analysis_configs_merged_changed_mask]
analysis_configs_merged_common = analysis_configs_merged[1, !analysis_configs_merged_changed_mask]
analysis_configs_merged_unique_changed_mask = analysis_configs_merged_unique %>% sapply(function(x) !length(unique(x)) == 1)
analysis_configs_merged_unique_changed = analysis_configs_merged_unique[, analysis_configs_merged_unique_changed_mask]
analysis_configs_merged_unique_common = analysis_configs_merged_unique[1, !analysis_configs_merged_unique_changed_mask]
write.csv(analysis_configs_merged, file.path(output_path, "config_summary.csv"))
write.csv(analysis_configs_merged_changed, file.path(output_path, "config_changed.csv"))
write.csv(analysis_configs_merged_common, file.path(output_path, "config_common.csv"))
gc()
analysis_meta_data = read_analysis_data(run_ids, "meta_data.csv") %>% add_sim_mode()
gc()
analysis_host_data_neutrality = read_analysis_data(run_ids, "host_data.csv", min_generation = 1400, max_generation = 1500)
gc()
analysis_host_genome_data_neutrality = read_analysis_data(run_ids, "host_genome_data.csv", min_generation = 1400, max_generation = 1500)
gc()
gc()
analysis_host_data_post_neutrality = read_analysis_data(run_ids, "host_data.csv", min_generation = 2000)
gc()
analysis_host_genome_data_post_neutrality = read_analysis_data(run_ids, "host_genome_data.csv", min_generation = 2000)
gc()
analysis_host_data_meta_last_n = analysis_host_data_neutrality %>%
bind_rows(analysis_host_data_post_neutrality) %>%
add_meta_sim_mode_analysis(analysis_meta_data) %>%
group_by(config_id, derived_sim_mode) %>%
filter(generation >= max(generation) - 100)
analysis_host_genome_data_meta_last_n = analysis_host_genome_data_neutrality %>%
bind_rows(analysis_host_genome_data_post_neutrality) %>%
add_meta_sim_mode_analysis(analysis_meta_data) %>%
group_by(config_id, derived_sim_mode) %>%
filter(generation >= max(generation) - 100) %>%
mutate(zygosity = case_when(
allele_1_id == allele_2_id ~ "Homozygous",
allele_1_id != allele_2_id ~ "Heterozygous"
))
gc()
analysis_host_genome_meta_combined = analysis_host_data_meta_last_n %>%
left_join(analysis_host_genome_data_meta_last_n, by = c("config_id", "generation", "species", "id"), suffix = c("", ".y")) %>%
select(-ends_with(".y"))
## zygosity general
analysis_host_genome_meta_combined_zygosity_counts = analysis_host_genome_meta_combined %>%
group_by(run_id, config_id, derived_sim_mode, species, locus_id, zygosity) %>%
summarise(count = n(), .groups = "keep") %>%
add_run_config_analysis(analysis_configs_merged) %>%
filter(infection.merit_threshold == 4) %>%
filter(species == 0) %>%
pivot_wider(names_from = zygosity, values_from = count) %>%
mutate(hobs = Heterozygous/(Homozygous+Heterozygous))
# paired t test probs would also work, almost all groups normally distributed
analysis_host_genome_meta_combined_zygosity_counts_sim_mode_pw_test = analysis_host_genome_meta_combined_zygosity_counts %>%
# scenario 2
group_by(pathogens.introgression_individuals_per_generation, hosts.species_n, pathogens.species_n) %>%
# other scenarios
# group_by(pathogens.introgression_individuals_per_generation, hosts.mutation_rate_per_peptide, pathogens.species_n, pathogens.mutation_rate_per_peptide) %>%
pairwise_t_test(hobs ~ derived_sim_mode) %>%
adjust_pvalue(method = "bonferroni") %>%
add_significance() %>%
add_xy_position(x = "derived_sim_mode")
analysis_host_genome_meta_combined_zygosity_counts_plt_box = ggplot(analysis_host_genome_meta_combined_zygosity_counts) +
aes(
x = derived_sim_mode,
y = hobs,
group = derived_sim_mode,
color = derived_sim_mode
) +
geom_boxplot() +
stat_pvalue_manual(analysis_host_genome_meta_combined_zygosity_counts_sim_mode_pw_test) +
scale_y_continuous(expand = expansion(mult = c(0.05, 0.15))) +
theme(axis.text.x = element_text(angle = -45, hjust = 0, vjust = 0.5)) +
facet_grid(
# scenario 2 first n last n
pathogens.introgression_individuals_per_generation + hosts.species_n ~ pathogens.species_n,
# other scenarios first n last n:
# pathogens.introgression_individuals_per_generation + hosts.mutation_rate_per_peptide ~ pathogens.species_n + pathogens.mutation_rate_per_peptide,
#labeller = labeller(id_same_config_different_mode = label_from_id ),
scales = "free_x",
labeller = label_both
)
analysis_host_genome_meta_combined_zygosity_counts_plt_box
save_plot_defaults(file.path(output_path, "analysis_host_genome_meta_combined_zygosity_counts_plt_box.png"),analysis_host_genome_meta_combined_zygosity_counts_plt_box, 3000, 5000 )
data_dir <- "./data"
output_dir <- "./output"
analysis_id <- "scenario_3"
output_path <- file.path(output_dir, analysis_id)
dir.create(output_path, showWarnings = FALSE)
run_ids = build_run_ids_same_date("2022-07-14",1,56)
analysis_configs_with_config_ids = read_analysis_configs(run_ids)
config_ids_sample = analysis_configs_with_config_ids %>% pull(config_id)
analysis_configs = analysis_configs_with_config_ids %>% select(!config_id)
# needs to be executed in one go, else hash might change???
analysis_configs$hash_no_sim_mode = analysis_configs %>% select((!run_id & !simulation_mode)) %>% apply(1, digest)
analysis_configs_merged_by_no_sim_hash = analysis_configs %>%
group_by(hash_no_sim_mode) %>%
summarise_all(merge_by_paste_if_unequal)
analysis_configs_hash_run_ids_map = analysis_configs_merged_by_no_sim_hash %>%
mutate(run_id_same_config_different_mode = run_id) %>%
select(hash_no_sim_mode, run_id_same_config_different_mode)
analysis_configs_merged = analysis_configs %>%
left_join(analysis_configs_hash_run_ids_map, by = "hash_no_sim_mode")
analysis_configs_merged_unique = analysis_configs_merged %>%
select((!run_id & !simulation_mode)) %>%
distinct(hash_no_sim_mode, .keep_all = TRUE) %>%
mutate(id_same_config_different_mode = 1:n())
analysis_configs_merged_changed_mask = analysis_configs_merged %>% sapply(function(x) !length(unique(x)) == 1)
analysis_configs_merged_changed = analysis_configs_merged[, analysis_configs_merged_changed_mask]
analysis_configs_merged_common = analysis_configs_merged[1, !analysis_configs_merged_changed_mask]
analysis_configs_merged_unique_changed_mask = analysis_configs_merged_unique %>% sapply(function(x) !length(unique(x)) == 1)
analysis_configs_merged_unique_changed = analysis_configs_merged_unique[, analysis_configs_merged_unique_changed_mask]
analysis_configs_merged_unique_common = analysis_configs_merged_unique[1, !analysis_configs_merged_unique_changed_mask]
write.csv(analysis_configs_merged, file.path(output_path, "config_summary.csv"))
write.csv(analysis_configs_merged_changed, file.path(output_path, "config_changed.csv"))
write.csv(analysis_configs_merged_common, file.path(output_path, "config_common.csv"))
gc()
analysis_meta_data = read_analysis_data(run_ids, "meta_data.csv") %>% add_sim_mode()
gc()
analysis_host_data_neutrality = read_analysis_data(run_ids, "host_data.csv", min_generation = 1400, max_generation = 1500)
gc()
analysis_host_genome_data_neutrality = read_analysis_data(run_ids, "host_genome_data.csv", min_generation = 1400, max_generation = 1500)
gc()
gc()
analysis_host_data_post_neutrality = read_analysis_data(run_ids, "host_data.csv", min_generation = 2000)
gc()
analysis_host_genome_data_post_neutrality = read_analysis_data(run_ids, "host_genome_data.csv", min_generation = 2000)
gc()
analysis_host_data_meta_last_n = analysis_host_data_neutrality %>%
bind_rows(analysis_host_data_post_neutrality) %>%
add_meta_sim_mode_analysis(analysis_meta_data) %>%
group_by(config_id, derived_sim_mode) %>%
filter(generation >= max(generation) - 100)
analysis_host_genome_data_meta_last_n = analysis_host_genome_data_neutrality %>%
bind_rows(analysis_host_genome_data_post_neutrality) %>%
add_meta_sim_mode_analysis(analysis_meta_data) %>%
group_by(config_id, derived_sim_mode) %>%
filter(generation >= max(generation) - 100) %>%
mutate(zygosity = case_when(
allele_1_id == allele_2_id ~ "Homozygous",
allele_1_id != allele_2_id ~ "Heterozygous"
))
gc()
analysis_host_genome_meta_combined = analysis_host_data_meta_last_n %>%
left_join(analysis_host_genome_data_meta_last_n, by = c("config_id", "generation", "species", "id"), suffix = c("", ".y")) %>%
select(-ends_with(".y"))
# paired t test probs would also work, almost all groups normally distributed
analysis_host_genome_meta_combined_zygosity_counts_sim_mode_pw_test = analysis_host_genome_meta_combined_zygosity_counts %>%
# scenario 2
# group_by(pathogens.introgression_individuals_per_generation, hosts.species_n, pathogens.species_n) %>%
# other scenarios
group_by(pathogens.introgression_individuals_per_generation, hosts.mutation_rate_per_peptide, pathogens.species_n, pathogens.mutation_rate_per_peptide) %>%
pairwise_t_test(hobs ~ derived_sim_mode) %>%
adjust_pvalue(method = "bonferroni") %>%
add_significance() %>%
add_xy_position(x = "derived_sim_mode")
analysis_host_genome_meta_combined_zygosity_counts_plt_box = ggplot(analysis_host_genome_meta_combined_zygosity_counts) +
aes(
x = derived_sim_mode,
y = hobs,
group = derived_sim_mode,
color = derived_sim_mode
) +
geom_boxplot() +
stat_pvalue_manual(analysis_host_genome_meta_combined_zygosity_counts_sim_mode_pw_test) +
scale_y_continuous(expand = expansion(mult = c(0.05, 0.15))) +
theme(axis.text.x = element_text(angle = -45, hjust = 0, vjust = 0.5)) +
facet_grid(
# scenario 2 first n last n
# pathogens.introgression_individuals_per_generation + hosts.species_n ~ pathogens.species_n,
# other scenarios first n last n:
pathogens.introgression_individuals_per_generation + hosts.mutation_rate_per_peptide ~ pathogens.species_n + pathogens.mutation_rate_per_peptide,
#labeller = labeller(id_same_config_different_mode = label_from_id ),
scales = "free_x",
labeller = label_both
)
save_plot_defaults(file.path(output_path, "analysis_host_genome_meta_combined_zygosity_counts_plt_box.png"),analysis_host_genome_meta_combined_zygosity_counts_plt_box, 8000, 5000 )
rm(list = ls())
library(tools)
library(rjson)
library(jsonlite)
library(goeveg)
library(digest)
library(tidyverse)
library(plotly)
library(Cairo)
library(ggpubr)
library(rstatix)
library(esquisse)
source("./help.R")
data_dir <- "./data"
output_dir <- "./output"
analysis_id <- "scenario_4"
output_path <- file.path(output_dir, analysis_id)
dir.create(output_path, showWarnings = FALSE)
run_ids = build_run_ids_same_date("2022-07-15",1,32)
analysis_configs_with_config_ids = read_analysis_configs(run_ids)
config_ids_sample = analysis_configs_with_config_ids %>% pull(config_id)
analysis_configs = analysis_configs_with_config_ids %>% select(!config_id)
# needs to be executed in one go, else hash might change???
analysis_configs$hash_no_sim_mode = analysis_configs %>% select((!run_id & !simulation_mode)) %>% apply(1, digest)
analysis_configs_merged_by_no_sim_hash = analysis_configs %>%
group_by(hash_no_sim_mode) %>%
summarise_all(merge_by_paste_if_unequal)
analysis_configs_hash_run_ids_map = analysis_configs_merged_by_no_sim_hash %>%
mutate(run_id_same_config_different_mode = run_id) %>%
select(hash_no_sim_mode, run_id_same_config_different_mode)
analysis_configs_merged = analysis_configs %>%
left_join(analysis_configs_hash_run_ids_map, by = "hash_no_sim_mode")
analysis_configs_merged_unique = analysis_configs_merged %>%
select((!run_id & !simulation_mode)) %>%
distinct(hash_no_sim_mode, .keep_all = TRUE) %>%
mutate(id_same_config_different_mode = 1:n())
analysis_configs_merged_changed_mask = analysis_configs_merged %>% sapply(function(x) !length(unique(x)) == 1)
analysis_configs_merged_changed = analysis_configs_merged[, analysis_configs_merged_changed_mask]
analysis_configs_merged_common = analysis_configs_merged[1, !analysis_configs_merged_changed_mask]
analysis_configs_merged_unique_changed_mask = analysis_configs_merged_unique %>% sapply(function(x) !length(unique(x)) == 1)
analysis_configs_merged_unique_changed = analysis_configs_merged_unique[, analysis_configs_merged_unique_changed_mask]
analysis_configs_merged_unique_common = analysis_configs_merged_unique[1, !analysis_configs_merged_unique_changed_mask]
write.csv(analysis_configs_merged, file.path(output_path, "config_summary.csv"))
write.csv(analysis_configs_merged_changed, file.path(output_path, "config_changed.csv"))
write.csv(analysis_configs_merged_common, file.path(output_path, "config_common.csv"))
gc()
analysis_meta_data = read_analysis_data(run_ids, "meta_data.csv") %>% add_sim_mode()
gc()
analysis_host_allele_data = read_analysis_data(run_ids, "host_allele_data.csv")
## non downsampled recruitment analysis
gc()
analysis_host_allele_data_created_last_n = analysis_host_allele_data %>%
# group_by(run_id_same_config_different_mode, config_id, derived_sim_mode, species, allele_id) %>%
# filter(age == max(age)) %>%
add_meta_sim_mode_analysis(analysis_meta_data) %>%
group_by(config_id, derived_sim_mode, species) %>%
mutate(age = generation - created_at) %>%
# filters alleles created in the last 100 generations
# problem: in a window only 100 generations wide, there is only one possible generation in which an allele could have emerged, that reaces 100 generations of age
# so: very old alleles (those that are most likely to not be in the 100 generation window) are not captured
# filter(created_at >= max(generation) - 100) %>%
# Filter all alleles that are currently at or below 100 generations old.
# Foregoes issue described above, but also includes alleles from non-equilibrium generations
filter(age <= 100) %>%
add_run_config_run_id_same_config_different_mode_analysis(analysis_configs_merged)
gc()
analysis_host_allele_data_alleles_counts_by_age = analysis_host_allele_data_created_last_n %>%
group_by(run_id_same_config_different_mode, config_id, derived_sim_mode, species, age) %>%
filter(species == 0) %>%
summarise(frequency_mean = mean(frequency), alleles_retained = n(), .groups = "keep") %>%
group_by(run_id_same_config_different_mode, config_id, derived_sim_mode, species) %>%
mutate(alleles_retained_percent = alleles_retained/alleles_retained[1L])  %>%
add_merged_run_config_analysis(analysis_configs_merged_unique) %>%
filter(infection.merit_threshold == 4)
# allele recruitment proportion
analysis_host_allele_data_alleles_retained_between_0_n = analysis_host_allele_data_alleles_counts_by_age %>%
filter(age == 20)
# allele overall retention proportion
analysis_host_allele_data_alleles_retained_between_0_end = analysis_host_allele_data_alleles_counts_by_age %>%
filter(age == 100)
# allele retention proportion
analysis_host_allele_data_alleles_retained_between_n_m = analysis_host_allele_data_alleles_counts_by_age %>%
filter(age == 20 | age == 100) %>%
mutate(allele_retained_n_m = alleles_retained/alleles_retained[1L]) %>%
filter(age == 100)
analysis_host_allele_data_alleles_retained_between_n_m
View(analysis_host_allele_data_alleles_retained_between_n_m)
analysis_host_allele_data_alleles_retained_between_n_m = analysis_host_allele_data_alleles_counts_by_age %>%
filter(age == 20 | age == 100) %>%
mutate(allele_retained_n_m = alleles_retained/alleles_retained[1L])
# allele retention proportion
analysis_host_allele_data_alleles_retained_between_n_m = analysis_host_allele_data_alleles_counts_by_age %>%
filter(age == 20 | age == 100) %>%
mutate(test = alleles_retained[1L]) %>%
mutate(allele_retained_n_m = alleles_retained/alleles_retained[1L]) # %>%
analysis_host_allele_data_alleles_retained_between_0_n_pw_test = analysis_host_allele_data_alleles_retained_between_0_n %>%
# scenario 2 pathogens.introgression_individuals_per_generation + hosts.species_n  ~ pathogens.species_n,
# group_by(pathogens.introgression_individuals_per_generation, hosts.species_n, pathogens.species_n) %>%
# other scenarios
group_by(pathogens.introgression_individuals_per_generation, hosts.mutation_rate_per_peptide, pathogens.species_n, pathogens.mutation_rate_per_peptide) %>%
pairwise_t_test(alleles_retained_percent ~ derived_sim_mode) %>%
adjust_pvalue(method = "bonferroni") %>%
add_significance() %>%
add_xy_position(x = "derived_sim_mode")
# test retainment proportion for differences
analysis_host_allele_data_alleles_retained_between_n_m_shapiro_test = analysis_host_allele_data_alleles_retained_between_n_m %>%
# scenario 2 pathogens.introgression_individuals_per_generation + hosts.species_n  ~ pathogens.species_n,
# group_by(pathogens.introgression_individuals_per_generation, hosts.species_n, pathogens.species_n, derived_sim_mode) %>%
# other scenarios
group_by(pathogens.introgression_individuals_per_generation, hosts.mutation_rate_per_peptide, pathogens.species_n, pathogens.mutation_rate_per_peptide, derived_sim_mode) %>%
shapiro_test(allele_retained_n_m) %>%
add_significance()
analysis_host_allele_data_alleles_retained_between_n_m_pw_test = analysis_host_allele_data_alleles_retained_between_n_m %>%
# scenario 2 pathogens.introgression_individuals_per_generation + hosts.species_n  ~ pathogens.species_n,
# group_by(pathogens.introgression_individuals_per_generation, hosts.species_n, pathogens.species_n) %>%
# other scenarios
group_by(pathogens.introgression_individuals_per_generation, hosts.mutation_rate_per_peptide, pathogens.species_n, pathogens.mutation_rate_per_peptide) %>%
pairwise_t_test(allele_retained_n_m ~ derived_sim_mode) %>%
adjust_pvalue(method = "bonferroni") %>%
add_significance() %>%
add_xy_position(x = "derived_sim_mode")
# alleles retained after n generation box plt with significances
analysis_host_allele_data_alleles_retained_between_0_n_plt_box = ggplot(analysis_host_allele_data_alleles_retained_between_0_n) +
aes(
x = derived_sim_mode,
y = alleles_retained_percent,
group = derived_sim_mode,
color = derived_sim_mode,
) +
geom_boxplot() +
stat_pvalue_manual(analysis_host_allele_data_alleles_retained_between_0_n_pw_test) +
scale_y_continuous(expand = expansion(mult = c(0.05, 0.15))) +
facet_grid(
# scenario 2
# pathogens.introgression_individuals_per_generation + hosts.species_n  ~ pathogens.species_n,
# scenario 2 with threshold
# pathogens.introgression_individuals_per_generation + hosts.species_n  ~ pathogens.species_n + infection.merit_threshold,
# other scenarios:
pathogens.introgression_individuals_per_generation + hosts.mutation_rate_per_peptide  ~ pathogens.species_n + pathogens.mutation_rate_per_peptide,
#labeller = labeller(id_same_config_different_mode = label_from_id ),
#scales = "free_x",
labeller = label_both
)
# alleles retained after investigated total interval generations box plt with significances
analysis_host_allele_data_alleles_retained_between_0_end_plt_box = ggplot(analysis_host_allele_data_alleles_retained_between_0_end) +
aes(
x = derived_sim_mode,
y = alleles_retained_percent,
group = derived_sim_mode,
color = derived_sim_mode,
) +
geom_boxplot() +
stat_pvalue_manual(analysis_host_allele_data_alleles_retained_between_0_end_pw_test) +
scale_y_continuous(expand = expansion(mult = c(0.05, 0.15))) +
facet_grid(
# scenario 2
# pathogens.introgression_individuals_per_generation + hosts.species_n  ~ pathogens.species_n,
# scenario 2 with threshold
# pathogens.introgression_individuals_per_generation + hosts.species_n  ~ pathogens.species_n + infection.merit_threshold,
#other scenarios:
pathogens.introgression_individuals_per_generation + hosts.mutation_rate_per_peptide  ~ pathogens.species_n + pathogens.mutation_rate_per_peptide,
#labeller = labeller(id_same_config_different_mode = label_from_id ),
#scales = "free_x",
labeller = label_both
)
analysis_host_allele_data_alleles_retained_between_0_n_pw_test = analysis_host_allele_data_alleles_retained_between_0_n %>%
# scenario 2 pathogens.introgression_individuals_per_generation + hosts.species_n  ~ pathogens.species_n,
# group_by(pathogens.introgression_individuals_per_generation, hosts.species_n, pathogens.species_n) %>%
# other scenarios
group_by(pathogens.introgression_individuals_per_generation, hosts.mutation_rate_per_peptide, pathogens.species_n, pathogens.mutation_rate_per_peptide) %>%
pairwise_t_test(alleles_retained_percent ~ derived_sim_mode) %>%
adjust_pvalue(method = "bonferroni") %>%
add_significance() %>%
add_xy_position(x = "derived_sim_mode")
analysis_host_allele_data_alleles_retained_between_0_end_pw_test = analysis_host_allele_data_alleles_retained_between_0_end %>%
# scenario 2 pathogens.introgression_individuals_per_generation + hosts.species_n  ~ pathogens.species_n,
# group_by(pathogens.introgression_individuals_per_generation, hosts.species_n, pathogens.species_n) %>%
# other scenarios
group_by(pathogens.introgression_individuals_per_generation, hosts.mutation_rate_per_peptide, pathogens.species_n, pathogens.mutation_rate_per_peptide) %>%
pairwise_t_test(alleles_retained_percent ~ derived_sim_mode) %>%
adjust_pvalue(method = "bonferroni") %>%
add_significance() %>%
add_xy_position(x = "derived_sim_mode")
analysis_host_allele_data_alleles_retained_between_n_m_pw_test = analysis_host_allele_data_alleles_retained_between_n_m %>%
# scenario 2 pathogens.introgression_individuals_per_generation + hosts.species_n  ~ pathogens.species_n,
# group_by(pathogens.introgression_individuals_per_generation, hosts.species_n, pathogens.species_n) %>%
# other scenarios
group_by(pathogens.introgression_individuals_per_generation, hosts.mutation_rate_per_peptide, pathogens.species_n, pathogens.mutation_rate_per_peptide) %>%
pairwise_t_test(allele_retained_n_m ~ derived_sim_mode) %>%
adjust_pvalue(method = "bonferroni") %>%
add_significance() %>%
add_xy_position(x = "derived_sim_mode")
# alleles retained after n generation box plt with significances
analysis_host_allele_data_alleles_retained_between_0_n_plt_box = ggplot(analysis_host_allele_data_alleles_retained_between_0_n) +
aes(
x = derived_sim_mode,
y = alleles_retained_percent,
group = derived_sim_mode,
color = derived_sim_mode,
) +
geom_boxplot() +
stat_pvalue_manual(analysis_host_allele_data_alleles_retained_between_0_n_pw_test) +
scale_y_continuous(expand = expansion(mult = c(0.05, 0.15))) +
facet_grid(
# scenario 2
# pathogens.introgression_individuals_per_generation + hosts.species_n  ~ pathogens.species_n,
# scenario 2 with threshold
# pathogens.introgression_individuals_per_generation + hosts.species_n  ~ pathogens.species_n + infection.merit_threshold,
# other scenarios:
pathogens.introgression_individuals_per_generation + hosts.mutation_rate_per_peptide  ~ pathogens.species_n + pathogens.mutation_rate_per_peptide,
#labeller = labeller(id_same_config_different_mode = label_from_id ),
#scales = "free_x",
labeller = label_both
)
# alleles retained after investigated total interval generations box plt with significances
analysis_host_allele_data_alleles_retained_between_0_end_plt_box = ggplot(analysis_host_allele_data_alleles_retained_between_0_end) +
aes(
x = derived_sim_mode,
y = alleles_retained_percent,
group = derived_sim_mode,
color = derived_sim_mode,
) +
geom_boxplot() +
stat_pvalue_manual(analysis_host_allele_data_alleles_retained_between_0_end_pw_test) +
scale_y_continuous(expand = expansion(mult = c(0.05, 0.15))) +
facet_grid(
# scenario 2
# pathogens.introgression_individuals_per_generation + hosts.species_n  ~ pathogens.species_n,
# scenario 2 with threshold
# pathogens.introgression_individuals_per_generation + hosts.species_n  ~ pathogens.species_n + infection.merit_threshold,
#other scenarios:
pathogens.introgression_individuals_per_generation + hosts.mutation_rate_per_peptide  ~ pathogens.species_n + pathogens.mutation_rate_per_peptide,
#labeller = labeller(id_same_config_different_mode = label_from_id ),
#scales = "free_x",
labeller = label_both
)
# alleles retained between n and m generations
analysis_host_allele_data_alleles_retained_between_n_m_plt_box = ggplot(analysis_host_allele_data_alleles_retained_between_n_m) +
aes(
x = derived_sim_mode,
y = allele_retained_n_m,
group = derived_sim_mode,
color = derived_sim_mode,
) +
geom_boxplot() +
stat_pvalue_manual(analysis_host_allele_data_alleles_retained_between_n_m_pw_test) +
scale_y_continuous(expand = expansion(mult = c(0.05, 0.15))) +
facet_grid(
# scenario 2
# pathogens.introgression_individuals_per_generation + hosts.species_n  ~ pathogens.species_n,
# scenario 2 with threshold
# pathogens.introgression_individuals_per_generation + hosts.species_n  ~ pathogens.species_n + infection.merit_threshold,
#other scenarios:
pathogens.introgression_individuals_per_generation + hosts.mutation_rate_per_peptide  ~ pathogens.species_n + pathogens.mutation_rate_per_peptide,
#labeller = labeller(id_same_config_different_mode = label_from_id ),
#scales = "free_x",
labeller = label_both
)
analysis_host_allele_data_alleles_retained_between_0_n_plt_box
analysis_host_allele_data_alleles_retained_between_0_end_plt_box
analysis_host_allele_data_alleles_retained_between_n_m_plt_box
# allele retention proportion
analysis_host_allele_data_alleles_retained_between_n_m = analysis_host_allele_data_alleles_counts_by_age %>%
filter(age == 20 | age == 100) %>%
mutate(allele_retained_n_m = alleles_retained/alleles_retained[1L]) %>%
filter(age == 100)
analysis_host_allele_data_alleles_retained_between_n_m_pw_test = analysis_host_allele_data_alleles_retained_between_n_m %>%
# scenario 2 pathogens.introgression_individuals_per_generation + hosts.species_n  ~ pathogens.species_n,
# group_by(pathogens.introgression_individuals_per_generation, hosts.species_n, pathogens.species_n) %>%
# other scenarios
group_by(pathogens.introgression_individuals_per_generation, hosts.mutation_rate_per_peptide, pathogens.species_n, pathogens.mutation_rate_per_peptide) %>%
pairwise_t_test(allele_retained_n_m ~ derived_sim_mode) %>%
adjust_pvalue(method = "bonferroni") %>%
add_significance() %>%
add_xy_position(x = "derived_sim_mode")
# alleles retained between n and m generations
analysis_host_allele_data_alleles_retained_between_n_m_plt_box = ggplot(analysis_host_allele_data_alleles_retained_between_n_m) +
aes(
x = derived_sim_mode,
y = allele_retained_n_m,
group = derived_sim_mode,
color = derived_sim_mode,
) +
geom_boxplot() +
stat_pvalue_manual(analysis_host_allele_data_alleles_retained_between_n_m_pw_test) +
scale_y_continuous(expand = expansion(mult = c(0.05, 0.15))) +
facet_grid(
# scenario 2
# pathogens.introgression_individuals_per_generation + hosts.species_n  ~ pathogens.species_n,
# scenario 2 with threshold
# pathogens.introgression_individuals_per_generation + hosts.species_n  ~ pathogens.species_n + infection.merit_threshold,
#other scenarios:
pathogens.introgression_individuals_per_generation + hosts.mutation_rate_per_peptide  ~ pathogens.species_n + pathogens.mutation_rate_per_peptide,
#labeller = labeller(id_same_config_different_mode = label_from_id ),
#scales = "free_x",
labeller = label_both
)
analysis_host_allele_data_alleles_retained_between_n_m_plt_box
save_plot_defaults(file.path(output_path, "analysis_host_allele_data_alleles_retained_between_n_m_plt_box.png"),analysis_host_allele_data_alleles_retained_between_n_m_plt_box, 3000, 5000 )
save_plot_defaults(file.path(output_path, "analysis_host_allele_data_alleles_retained_between_n_m_plt_box.png"),analysis_host_allele_data_alleles_retained_between_n_m_plt_box, 5000, 5000 )
save_plot_defaults(file.path(output_path, "analysis_host_allele_data_alleles_retained_between_n_m_plt_box.png"),analysis_host_allele_data_alleles_retained_between_n_m_plt_box, 5000, 5000 )
