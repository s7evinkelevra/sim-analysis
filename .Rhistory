library(tools)
library(readr)
library(rjson)
library(data.table)
library(esquisse)
data_dir = "./data"
current_run_id = "run-20220615"
current_run_path = file.path(data_dir, current_run_id)
# Reading data from config, config id 0 in this case
config0_path = file.path(current_run_path, "config-0")
config0_config = fromJSON(file=file.path(config0_path, "config.json"))
config0_csv_files = list.files(path=config0_path, pattern="\\.csv$")
config0_data = list()
for(filename in config0_csv_files){
name = tools::file_path_sans_ext(filename)
config0_data[[name]] = read_delim(file.path(config0_path, filename),
delim = ";", escape_double = FALSE, trim_ws = TRUE, show_col_types = FALSE)
}
config0_data$meta_data
esquisse::esquisser(config0_data$host_allele_data)
config0_data$host_allele_data
esquisse::esquisser(config0_data$host_allele_data)
View(config0_data$host_allele_data)
esquisse::esquisser(config0_data$host_allele_data)
esquisse::esquisser(config0_data$host_allele_data)
data_dir = "./data"
current_run_id = "run-20220615"
current_run_path = file.path(data_dir, current_run_id)
# Reading data from config, config id 0 in this case
current_config_path = file.path(current_run_path, "config-0")
config0_config = fromJSON(file=file.path(current_config_path, "config.json"))
config0_csv_files = list.files(path=current_config_path, pattern="\\.csv$")
config0_data = list()
for(filename in config0_csv_files){
name = tools::file_path_sans_ext(filename)
config0_data[[name]] = read_delim(file.path(current_config_path, filename),
delim = ";", escape_double = FALSE, trim_ws = TRUE, show_col_types = FALSE)
}
config0_data$meta_data
View(config0_data$host_allele_data)
library(tidyverse)
library(rjson)
library(tidyverse)
library(tools)
library(rjson)
library(tidyverse)
library(esquisse)
data_dir = "./data"
current_run_id = "run-20220615"
current_run_path = file.path(data_dir, current_run_id)
# Reading data from config, config id 0 in this case
config0_path = file.path(current_run_path, "config-0")
# nice name lol
read_config_config <- function(config_path) {
return(fromJSON(file=file.path(config_path, "config.json")))
}
read_config_csv <- function(config_path) {
csv_files = list.files(path=config_path, pattern="\\.csv$")
csv_data = list()
for(filename in csv_files){
name = tools::file_path_sans_ext(filename)
csv_data[[name]] = read_delim(file.path(config_path, filename),
delim = ";", escape_double = FALSE, trim_ws = TRUE, show_col_types = FALSE)
}
return(csv_data)
}
config0_config = read_config_config(config0_path)
config0_data = read_config_csv(config0_path)
config0_data$meta_data
View(config0_data$host_allele_data)
# get allele counts
config0_data$host_allele_data %>% count(generation, species)
# get allele counts
config0_data$host_allele_counts = config0_data$host_allele_data %>% count(generation, species)
esquisse::esquisser(config0_data$host_allele_counts)
library(tools)
library(rjson)
library(tidyverse)
library(esquisse)
data_dir = "./data"
current_run_id = "run-20220615"
current_run_path = file.path(data_dir, current_run_id)
# nice name lol
read_config_config <- function(config_path) {
return(fromJSON(file=file.path(config_path, "config.json")))
}
read_config_csv <- function(config_path) {
csv_files = list.files(path=config_path, pattern="\\.csv$")
csv_data = list()
for(filename in csv_files){
name = tools::file_path_sans_ext(filename)
csv_data[[name]] = read_delim(file.path(config_path, filename),
delim = ";", escape_double = FALSE, trim_ws = TRUE, show_col_types = FALSE)
}
return(csv_data)
}
# Reading data from config, config id 0 in this case
config0_path = file.path(current_run_path, "config-0")
config0_config = read_config_config(config0_path)
config0_data = read_config_csv(config0_path)
# get allele counts
config0_data$host_allele_counts = config0_data$host_allele_data %>% count(generation, species)
config0_data$meta_data
View(config0_data$host_allele_data)
data_dir = "./data"
# nice name lol
read_config_config <- function(config_path) {
return(fromJSON(file=file.path(config_path, "config.json")))
}
read_config_csv <- function(config_path) {
csv_files = list.files(path=config_path, pattern="\\.csv$")
csv_data = list()
for(filename in csv_files){
name = tools::file_path_sans_ext(filename)
csv_data[[name]] = read_delim(file.path(config_path, filename),
delim = ";", escape_double = FALSE, trim_ws = TRUE, show_col_types = FALSE)
}
return(csv_data)
}
# Reading data from config, config id 0 in this case
config0_path = file.path(data_dir, "config-0")
config0_config = read_config_config(config0_path)
data_dir = "./data"
# nice name lol
read_config_config <- function(config_path) {
return(fromJSON(file=file.path(config_path, "config.json")))
}
read_config_csv <- function(config_path) {
csv_files = list.files(path=config_path, pattern="\\.csv$")
csv_data = list()
for(filename in csv_files){
name = tools::file_path_sans_ext(filename)
csv_data[[name]] = read_delim(file.path(config_path, filename),
delim = ";", escape_double = FALSE, trim_ws = TRUE, show_col_types = FALSE)
}
return(csv_data)
}
# Reading data from config, config id 0 in this case
config0_path = file.path(data_dir, "config-0")
config0_config = read_config_config(config0_path)
config0_data = read_config_csv(config0_path)
# nice name lol
read_config_config <- function(config_path) {
return(fromJSON(file=file.path(config_path, "config.json")))
}
read_config_data <- function(config_path) {
csv_files = list.files(path=config_path, pattern="\\.csv$")
csv_data = list()
for(filename in csv_files){
name = tools::file_path_sans_ext(filename)
csv_data[[name]] = read_delim(file.path(config_path, filename),
delim = ";", escape_double = FALSE, trim_ws = TRUE, show_col_types = FALSE)
}
return(csv_data)
}
# Reading data from config, config id 0 in this case
config0_path = file.path(data_dir, "config-0")
config0_config = read_config_config(config0_path)
config0_data = read_config_data(config0_path)
current_run_id = "run-2022-06-15-1"
current_run_path = file.path(data_dir, current_run_id)
# Reading data from config, config id 0 in this case
config0_path = file.path(data_dir, curren_run_path, "config-0")
# Reading data from config, config id 0 in this case
config0_path = file.path(data_dir, current_run_path, "config-0")
config0_config = read_config_config(config0_path)
# Reading data from config, config id 0 in this case
config0_path = file.path(current_run_path, "config-0")
config0_config = read_config_config(config0_path)
config0_data = read_config_data(config0_path)
remotes::install_github("anthonynorth/rscodeio")
install.packages("remotes")
library(remotes)
remotes::install_github("anthonynorth/rscodeio")
rscodeio::install_theme()
library(tools)
library(rjson)
library(jsonlite)
library(tidyverse)
library(esquisse)
data_dir = "./data"
current_run_id = "run-2022-06-17-1"
current_run_path = file.path(data_dir, current_run_id)
output_dir = "./output"
# nice name lol
read_config_config <- function(config_path) {
return(rjson::fromJSON(file=file.path(config_path, "config.json")))
}
read_config_data <- function(config_path) {
csv_files = list.files(path=config_path, pattern="\\.csv$")
csv_data = list()
for(filename in csv_files){
name = tools::file_path_sans_ext(filename)
csv_data[[name]] = read_delim(file.path(config_path, filename),
delim = ";", escape_double = FALSE, trim_ws = TRUE, show_col_types = FALSE)
}
return(csv_data)
}
read_run_configs <- function(run_path) {
configs = list()
config_folders = list.dirs(run_path)[-1]
for(config_folder in config_folders) {
current_config = read_config_config(config_folder)
configs[[basename(config_folder)]] = current_config
}
return(configs)
}
read_run_data <- function(run_path,csv_name) {
data = list()
data_folders = list.dirs(run_path)[-1]
data_name = tools::file_path_sans_ext(csv_name)
for(data_folder in data_folders) {
current_data_file_path = file.path(data_folder, csv_name)
current_data = read_delim(current_data_file_path, delim = ";", escape_double = FALSE, trim_ws = TRUE, show_col_types = FALSE)
current_config = read_config_config(data_folder)
data[[as.character(current_config$configId)]] = current_data
}
return(data)
}
generate_run_config_summary <- function(run_id, run_configs) {
config_tibble = NULL
for(config in run_configs){
config["run_id"] = run_id
if(is.null(config_tibble)) {
config_tibble = config %>% unlist() %>% enframe() %>% pivot_wider()
}else{
config_tibble = add_row(config_tibble, config %>% unlist() %>% enframe() %>% pivot_wider())
}
}
config_tibble = config_tibble %>% column_to_rownames(var="configId")
return(config_tibble)
}
label_from_config_id <- function(config_id){
label = ""
for(col_i in 1:ncol(run_config_changed[config_id,])) {
label = paste(label, colnames(run_config_changed[config_id,])[col_i], "=", run_config_changed[config_id, col_i], "\n")
}
return(label)
}
property_from_config_id <- function(config_id, property_name){
return(run_config_summary[config_id, property_name])
}
# Read run data
run_configs = read_run_configs(current_run_path)
run_host_allele_data = read_run_data(current_run_path, "host_allele_data.csv")
run_host_allele_data_combined = bind_rows(run_host_allele_data, .id = "config_id")
# Create output folder for this run
dir.create(file.path(output_dir, current_run_id), showWarnings = FALSE)
# Write summary of the configs to csv
run_config_summary = generate_run_config_summary(current_run_id, run_configs)
write.csv(run_config_summary, file.path(output_dir, current_run_id, "config_summary.csv"))
# Get all config vars that have been changed throughout the run
run_config_changed_mask = run_config_summary %>% sapply(function(x) !length(unique(x)) == 1)
run_config_changed = run_config_summary[, run_config_changed_mask]
run_allele_counts = run_host_allele_data_combined %>% count(config_id, generation, species)
run_allele_counts_grouped = run_allele_counts %>% group_by(config_id)
run_allele_counts_plt = ggplot(run_allele_counts_grouped) +
aes(
x = generation,
y = n,
color = species,
group = species
) +
geom_line(size = 0.5) +
scale_color_distiller(palette = "Set1", direction = 1) +
theme_minimal() +
facet_wrap(
vars(config_id),
labeller=labeller(config_id = label_from_config_id)
)
run_allele_counts_plt
ggsave(file.path(output_dir, current_run_id, "allele_counts.png"), plot = run_allele_counts_plt, width = 5000, height = 5000, units = "px")
run_allele_frequencies_plt = ggplot(run_host_allele_data_combined) +
aes(
x = generation,
y = frequency,
color = created_at,
group = species
) +
geom_line() +
scale_color_distiller(palette = "Set1", direction = 1) +
facet_wrap(
vars(config_id),
labeller=labeller(config_id = label_from_config_id)
)
ggsave(file.path(output_dir, current_run_id, "allele_frequencies.png"), plot = run_allele_frequencies_plt, width = 5000, height = 5000, units = "px")
run_allele_frequencies_plt = ggplot(run_host_allele_data_combined) +
aes(
x = generation,
y = frequency,
color = created_at,
group = species
) +
geom_line(size = 0.1) +
scale_color_distiller(palette = "Set1", direction = 1) +
theme_minimal() +
facet_wrap(
vars(config_id),
labeller=labeller(config_id = label_from_config_id)
)
ggsave(file.path(output_dir, current_run_id, "allele_frequencies.png"), plot = run_allele_frequencies_plt, width = 10000, height = 10000, units = "px")
esquisse::esquisser(run_allele_counts_grouped)
run_allele_frequencies_plt = ggplot(run_host_allele_data_combined) +
aes(
x = generation,
y = frequency,
color = created_at,
group = species
) +
geom_step(size = 0.2) +
scale_color_distiller(palette = "Set1", direction = 1) +
theme_minimal() +
facet_wrap(
vars(config_id),
labeller=labeller(config_id = label_from_config_id)
)
ggsave(file.path(output_dir, current_run_id, "allele_frequencies.png"), plot = run_allele_frequencies_plt, width = 10000, height = 10000, units = "px")
run_allele_frequencies_plt = ggplot(run_host_allele_data_combined) +
aes(
x = generation,
y = frequency,
fill = allele_id
#color = created_at,
#group = species
) +
geom_bar(position = "stack",stat = "identity") +
#geom_step(size = 0.2) +
scale_color_distiller(palette = "Set1", direction = 1) +
theme_minimal() +
facet_wrap(
vars(config_id),
labeller=labeller(config_id = label_from_config_id)
)
ggsave(file.path(output_dir, current_run_id, "allele_frequencies_bar.png"), plot = run_allele_frequencies_plt, width = 10000, height = 10000, units = "px")
run_allele_frequencies_plt = ggplot(run_host_allele_data_combined) +
aes(
x = generation,
y = count,
fill = allele_id
color = created_at,
#group = species
) +
geom_bar(position = "stack",stat = "identity") +
#geom_step(size = 0.2) +
scale_color_distiller(palette = "Set1", direction = 1) +
theme_minimal() +
facet_wrap(
vars(config_id),
labeller=labeller(config_id = label_from_config_id)
)
run_allele_frequencies_plt = ggplot(run_host_allele_data_combined) +
aes(
x = generation,
y = count,
fill = allele_id,
color = created_at,
#group = species
) +
geom_bar(position = "stack",stat = "identity") +
#geom_step(size = 0.2) +
scale_color_distiller(palette = "Set1", direction = 1) +
theme_minimal() +
facet_wrap(
vars(config_id),
labeller=labeller(config_id = label_from_config_id)
)
ggsave(file.path(output_dir, current_run_id, "allele_counts_bar.png"), plot = run_allele_frequencies_plt, width = 10000, height = 10000, units = "px")
View(run_host_allele_data)
run_allele_frequencies_plt = ggplot(run_host_allele_data_combined) +
aes(
x = generation,
y = count,
#fill = allele_id,
color = created_at,
group = species
) +
#geom_bar(position = "stack",stat = "identity") +
geom_step(size = 0.1) +
scale_color_distiller(palette = "Set1", direction = 1) +
theme_minimal() +
facet_wrap(
vars(config_id),
labeller=labeller(config_id = label_from_config_id)
)
ggsave(file.path(output_dir, current_run_id, "allele_counts_wide.png"), plot = run_allele_frequencies_plt, width = 10000, height = 5000, units = "px")
run_allele_frequencies_plt = ggplot(run_host_allele_data_combined) +
aes(
x = generation,
y = count,
#fill = allele_id,
color = created_at,
group = species
) +
#geom_bar(position = "stack",stat = "identity") +
geom_step(size = 0.5) +
scale_color_distiller(palette = "Set1", direction = 1) +
theme_minimal() +
facet_wrap(
vars(config_id),
labeller=labeller(config_id = label_from_config_id)
)
ggsave(file.path(output_dir, current_run_id, "allele_counts_step.png"), plot = run_allele_frequencies_plt, width = 2000, height = 1000, units = "px")
